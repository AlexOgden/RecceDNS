name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper release notes generation
          
      - name: Get Version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ github.ref }}^ 2>/dev/null || echo "")
          
          # Prepare the release notes content
          if [ -z "$PREVIOUS_TAG" ]; then
            # If this is the first tag
            echo "NOTES<<EOF" >> $GITHUB_ENV
            echo "## What's New" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "First release!" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            # If there are previous tags
            echo "NOTES<<EOF" >> $GITHUB_ENV
            echo "## What's Changed" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "Changes since $PREVIOUS_TAG:" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an)" $PREVIOUS_TAG..${{ github.ref }} >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ env.NOTES }}
          draft: false
          prerelease: false

  build_and_upload_standard:
    needs: create_release
    name: Build and Upload - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_name: win-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_name: mac-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform_name: mac-aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          
      - name: Prepare binary for upload
        shell: bash
        run: |
          # Extract version without 'v' prefix
          VERSION=${{ needs.create_release.outputs.version }}
          VERSION_NUMBER=${VERSION#v}
          
          # Set the asset name with the requested format
          if [[ "${{ matrix.platform_name }}" == "win-x86_64" ]]; then
            ASSET_NAME="reccedns-${VERSION}-${{ matrix.platform_name }}.exe"
          else
            ASSET_NAME="reccedns-${VERSION}-${{ matrix.platform_name }}"
          fi
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
          
          # Copy the binary with proper naming
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # For Windows, copy the executable directly
            cp target/${{ matrix.target }}/release/reccedns.exe ${ASSET_NAME}
          else
            # For Linux and macOS, find the executable and copy it
            mkdir -p dist
            cp target/${{ matrix.target }}/release/reccedns dist/ 2>/dev/null || cp target/${{ matrix.target }}/release/reccedns* dist/
            cd dist
            # Find the main executable (assumed to be named 'reccedns')
            cp reccedns ../${ASSET_NAME} 2>/dev/null || cp $(find . -type f -perm -u=x | head -1) ../${ASSET_NAME}
            cd ..
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  build_and_upload_arm:
    needs: create_release
    name: Build and Upload ARM - ${{ matrix.platform_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: armv7-unknown-linux-musleabihf
            platform_name: linux-armv7
            docker_image: messense/rust-musl-cross:armv7-musleabihf
          - target: aarch64-unknown-linux-musl
            platform_name: linux-aarch64
            docker_image: messense/rust-musl-cross:aarch64-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Docker build script
        run: |
          # Create a build script that will run inside the Docker container
          cat > build.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Set OpenSSL to compile in vendored mode
          export OPENSSL_STATIC=true
          
          # Build the binary with OpenSSL features
          cargo build --release --target $TARGET --features vendored-openssl
          
          # Test that the binary exists
          echo "Built binary details:"
          ls -la target/$TARGET/release/reccedns*
          file target/$TARGET/release/reccedns
          
          # Make sure the binary is executable
          chmod +x target/$TARGET/release/reccedns
          EOF
          
          chmod +x build.sh
          
          # Add OpenSSL feature to Cargo.toml if needed
          if ! grep -q "vendored-openssl" Cargo.toml; then
            echo "" >> Cargo.toml
            echo "[features]" >> Cargo.toml
            echo "vendored-openssl = [\"openssl/vendored\"]" >> Cargo.toml
            echo "" >> Cargo.toml
            echo "[dependencies.openssl]" >> Cargo.toml
            echo "version = \"0.10\"" >> Cargo.toml
            echo "optional = true" >> Cargo.toml
          fi

      - name: Build in Docker
        run: |
          VERSION=${{ needs.create_release.outputs.version }}
          ASSET_NAME="reccedns-${VERSION}-${{ matrix.platform_name }}"
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
          
          # Run the build in Docker
          docker run --rm \
            -v $(pwd):/workdir \
            -w /workdir \
            -e TARGET=${{ matrix.target }} \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            ${{ matrix.docker_image }} \
            ./build.sh
          
          # Copy the resulting binary with the correct name
          cp target/${{ matrix.target }}/release/reccedns ${ASSET_NAME}
          
          # Verify the asset exists
          ls -la ${ASSET_NAME}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  build_and_publish_docker:
    needs: create_release
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: alexogden
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          VERSION="${{ needs.create_release.outputs.version }}"
          VERSION_NO_V=${VERSION#v}
          echo "version_no_v=${VERSION_NO_V}" >> $GITHUB_OUTPUT
          
          # Extract major and minor versions
          MAJOR=$(echo ${VERSION_NO_V} | cut -d. -f1)
          MINOR=$(echo ${VERSION_NO_V} | cut -d. -f2)
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "major_minor=${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push basic Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.basic
          push: true
          tags: |
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.version_no_v }}
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.major_minor }}
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.major }}
            ghcr.io/alexogden/reccedns:latest
          labels: |
            org.opencontainers.image.title=RecceDNS
            org.opencontainers.image.description=DNS Enumeration and Information Gathering Tool
            org.opencontainers.image.version=${{ steps.version.outputs.version_no_v }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          platforms: linux/amd64,linux/arm64

      - name: Build and push lists Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.lists
          push: true
          tags: |
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.version_no_v }}-lists
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.major_minor }}-lists
            ghcr.io/alexogden/reccedns:${{ steps.version.outputs.major }}-lists
            ghcr.io/alexogden/reccedns:lists
          labels: |
            org.opencontainers.image.title=RecceDNS with SecLists
            org.opencontainers.image.description=DNS Enumeration and Information Gathering Tool with SecLists DNS wordlists included
            org.opencontainers.image.version=${{ steps.version.outputs.version_no_v }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          platforms: linux/amd64,linux/arm64

      - name: Update release notes with Docker information
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.create_release.outputs.version }}
          append_body: true
          body: |
            ## Docker Images
            
            Docker images are available on GitHub Container Registry:
            
            ### Basic Image
            Container with the RecceDNS tool only. Mount wordlists for subdomain enumeration via a bind or volume mount.
            ```
            docker pull ghcr.io/alexogden/reccedns:${{ steps.version.outputs.version_no_v }}
            docker pull ghcr.io/alexogden/reccedns:latest
            ```
            
            ### Image with SecLists
            Container with the RecceDNS tool and the SecLists DNS wordlists included. Use the `lists` tag to pull this image.
            ```
            docker pull ghcr.io/alexogden/reccedns:${{ steps.version.outputs.version_no_v }}-lists
            docker pull ghcr.io/alexogden/reccedns:lists
            ```
